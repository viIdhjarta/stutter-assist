import React, { useState } from 'react';

const STORAGE_KEYS = {
  DIFFICULT: 'difficult_pronunciations',
  EASY: 'easy_pronunciations',
  FONT_SIZE: 'font_size',
  THEME: 'theme'
} as const;

interface PreferencesModalProps {
  show: boolean;
  onHide: () => void;
  onSave: (easyPronunciations: string[], difficultPronunciations: string[], fontSize: string, theme: string) => void;
}

const PreferencesModal: React.FC<PreferencesModalProps> = ({
  show,
  onHide,
  onSave,
}) => {

  // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâË®≠ÂÆö„ÇíË™≠„ÅøËæº„ÇÄ
  const loadStoredSettings = () => {
    const storedDifficult = localStorage.getItem(STORAGE_KEYS.DIFFICULT);
    const storedEasy = localStorage.getItem(STORAGE_KEYS.EASY);
    const storedFontSize = localStorage.getItem(STORAGE_KEYS.FONT_SIZE);
    const storedTheme = localStorage.getItem(STORAGE_KEYS.THEME);

    return {
      difficult: storedDifficult ? JSON.parse(storedDifficult) : [],
      easy: storedEasy ? JSON.parse(storedEasy) : [],
      fontSize: storedFontSize || 'medium',
      theme: storedTheme || 'light'
    };
  };

  // Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
  const saveToLocalStorage = (easy: string[], difficult: string[], fontSize: string, theme: string) => {
    localStorage.setItem(STORAGE_KEYS.EASY, JSON.stringify(easy));
    localStorage.setItem(STORAGE_KEYS.DIFFICULT, JSON.stringify(difficult));
    localStorage.setItem(STORAGE_KEYS.FONT_SIZE, fontSize);
    localStorage.setItem(STORAGE_KEYS.THEME, theme);
  };

  const storedSettings = loadStoredSettings();
  const [easyPronunciations, setEasyPronunciations] = useState<string[]>(storedSettings.easy);
  const [difficultPronunciations, setDifficultPronunciations] = useState<string[]>(storedSettings.difficult);
  const [fontSize, setFontSize] = useState<string>(storedSettings.fontSize);
  const [theme, setTheme] = useState<string>(storedSettings.theme);
  const [activeMainTab, setActiveMainTab] = useState<'pronunciation' | 'display'>('pronunciation');
  const [activeSoundTab, setActiveSoundTab] = useState<'seion' | 'dakuon' | 'handakuon'>('seion');

  // 50Èü≥Âõ≥„ÅÆ„Éá„Éº„ÇøÔºàÁ∏¶Êõ∏„ÅçÁî®„Å´ÂÜçÊßãÊàê„ÄÅÈáçË§á„ÇíÈô§ÂéªÔºâ
  const seion = [
    ['„Çè', '„Çâ', '„ÇÑ', '„Åæ', '„ÅØ', '„Å™', '„Åü', '„Åï', '„Åã', '„ÅÇ'],
    ['', '„Çä', '', '„Åø', '„Å≤', '„Å´', '„Å°', '„Åó', '„Åç', '„ÅÑ'],
    ['', '„Çã', '„ÇÜ', '„ÇÄ', '„Åµ', '„Å¨', '„Å§', '„Åô', '„Åè', '„ÅÜ'],
    ['', '„Çå', '', '„ÇÅ', '„Å∏', '„Å≠', '„Å¶', '„Åõ', '„Åë', '„Åà'],
    ['„Çí', '„Çç', '„Çà', '„ÇÇ', '„Åª', '„ÅÆ', '„Å®', '„Åù', '„Åì', '„Åä'],
    ['„Çì']
  ];

  const dakuon = [
    ['„Å∞', '„Å†', '„Åñ', '„Åå'],
    ['„Å≥', '„Å¢', '„Åò', '„Åé'],
    ['„Å∂', '„Å•', '„Åö', '„Åê'],
    ['„Åπ', '„Åß', '„Åú', '„Åí'],
    ['„Åº', '„Å©', '„Åû', '„Åî']
  ];

  const handakuon = [
    ['„Å±'],
    ['„Å¥'],
    ['„Å∑'],
    ['„Å∫'],
    ['„ÅΩ']
  ];

  const togglePronunciation = (sound: string) => {
    if (difficultPronunciations.includes(sound)) {
      // Èõ£„Åó„ÅÑÈü≥ÔºàËµ§Ôºâ„Åã„ÇâË®Ä„ÅÑ„ÇÑ„Åô„ÅÑÈü≥ÔºàÁ∑ëÔºâ„Å´Â§âÊõ¥
      setDifficultPronunciations(prev => prev.filter(s => s !== sound));
      setEasyPronunciations(prev => [...prev, sound]);
    } else if (easyPronunciations.includes(sound)) {
      // Ë®Ä„ÅÑ„ÇÑ„Åô„ÅÑÈü≥ÔºàÁ∑ëÔºâ„Åã„ÇâÊú™Ë®≠ÂÆöÔºà„Ç∞„É¨„ÉºÔºâ„Å´Â§âÊõ¥
      setEasyPronunciations(prev => prev.filter(s => s !== sound));
    } else {
      // Êú™Ë®≠ÂÆöÔºà„Ç∞„É¨„ÉºÔºâ„Åã„ÇâÈõ£„Åó„ÅÑÈü≥ÔºàËµ§Ôºâ„Å´Â§âÊõ¥
      setDifficultPronunciations(prev => [...prev, sound]);
    }
  };

  const handleSave = () => {
    saveToLocalStorage(easyPronunciations, difficultPronunciations, fontSize, theme);
    onSave(easyPronunciations, difficultPronunciations, fontSize, theme);
    onHide();
  };

  const renderSoundGrid = (sounds: string[][]) => (
    <div className="flex justify-center gap-4">
      {sounds[0].map((_, columnIndex) => (
        <div key={columnIndex} className="flex flex-col gap-3">
          {sounds.map((row, rowIndex) => (
            row[columnIndex] && row[columnIndex] !== '' && (
              <button
                key={`${rowIndex}-${columnIndex}`}
                className={`w-12 h-12 text-lg font-medium rounded-lg border-2 transition-all duration-200 hover:scale-105 ${
                  difficultPronunciations.includes(row[columnIndex])
                    ? 'bg-red-500 text-white border-red-600 shadow-red-200 shadow-lg'
                    : easyPronunciations.includes(row[columnIndex])
                    ? 'bg-green-500 text-white border-green-600 shadow-green-200 shadow-lg'
                    : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
                }`}
                onClick={() => togglePronunciation(row[columnIndex])}
              >
                {row[columnIndex]}
              </button>
            )
          ))}
        </div>
      ))}
    </div>
  );

  if (!show) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      {/* „Ç™„Éº„Éê„Éº„É¨„Ç§ */}
      <div className="fixed inset-0 bg-black bg-opacity-50 transition-opacity" onClick={onHide}></div>
      
      {/* „É¢„Éº„ÉÄ„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className="flex min-h-full items-center justify-center p-4 text-center">
        <div className="relative w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white p-8 text-left align-middle shadow-2xl transition-all">
          {/* „Éò„ÉÉ„ÉÄ„Éº */}
          <div className="flex items-center justify-between mb-6">
            <button
              onClick={onHide}
              className="rounded-lg p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors duration-200"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* „É°„Ç§„É≥„Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
          <div className="flex justify-center mb-8">
            <div className="flex bg-gray-100 rounded-xl p-1">
              {[
                { key: 'pronunciation', label: 'üó£Ô∏è Áô∫Èü≥Ë®≠ÂÆö' },
                { key: 'display', label: 'üé® Ë°®Á§∫Ë®≠ÂÆö' }
              ].map((tab) => (
                <button
                  key={tab.key}
                  onClick={() => setActiveMainTab(tab.key as 'pronunciation' | 'display')}
                  className={`px-8 py-3 rounded-lg font-medium transition-all duration-200 ${
                    activeMainTab === tab.key
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </div>
          </div>

          {/* Áô∫Èü≥Ë®≠ÂÆö„Çø„Éñ */}
          {activeMainTab === 'pronunciation' && (
            <div className="mb-8">
              {/* Èü≥„ÅÆ„Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
              <div className="flex justify-center mb-8">
                <div className="flex bg-gray-100 rounded-xl p-1">
                  {[
                    { key: 'seion', label: 'Ê∏ÖÈü≥' },
                    { key: 'dakuon', label: 'ÊøÅÈü≥' },
                    { key: 'handakuon', label: 'ÂçäÊøÅÈü≥' }
                  ].map((tab) => (
                    <button
                      key={tab.key}
                      onClick={() => setActiveSoundTab(tab.key as 'seion' | 'dakuon' | 'handakuon')}
                      className={`px-6 py-3 rounded-lg font-medium transition-all duration-200 ${
                        activeSoundTab === tab.key
                          ? 'bg-white text-blue-600 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      {tab.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Èü≥„Ç∞„É™„ÉÉ„Éâ */}
              <div className="bg-gray-50 rounded-xl p-8 mb-6">
                {activeSoundTab === 'seion' && renderSoundGrid(seion)}
                {activeSoundTab === 'dakuon' && renderSoundGrid(dakuon)}
                {activeSoundTab === 'handakuon' && renderSoundGrid(handakuon)}
              </div>

              {/* Ë™¨Êòé */}
              <div className="flex justify-center items-center space-x-8 mb-8">
                <div className="flex items-center space-x-2">
                  <div className="w-5 h-5 bg-green-500 rounded-lg shadow-sm"></div>
                  <span className="text-sm font-medium text-gray-700">„ÅÑ„ÅÑ„ÇÑ„Åô„ÅÑÈü≥</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-5 h-5 bg-red-500 rounded-lg shadow-sm"></div>
                  <span className="text-sm font-medium text-gray-700">Ëã¶Êâã„Å™Èü≥</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-5 h-5 bg-gray-200 rounded-lg shadow-sm"></div>
                  <span className="text-sm font-medium text-gray-700">Êú™Ë®≠ÂÆö</span>
                </div>
              </div>
            </div>
          )}

          {/* Ë°®Á§∫Ë®≠ÂÆö„Çø„Éñ */}
          {activeMainTab === 'display' && (
            <div className="mb-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* ÊñáÂ≠ó„Çµ„Ç§„Ç∫Ë®≠ÂÆö */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">ÊñáÂ≠ó„Çµ„Ç§„Ç∫</label>
                  <div className="space-y-2">
                    {[
                      { value: 'small', label: 'Â∞è', size: 'text-sm' },
                      { value: 'medium', label: '‰∏≠', size: 'text-base' },
                      { value: 'large', label: 'Â§ß', size: 'text-lg' },
                      { value: 'xlarge', label: 'ÁâπÂ§ß', size: 'text-xl' }
                    ].map((option) => (
                      <label key={option.value} className="flex items-center space-x-3 cursor-pointer">
                        <input
                          type="radio"
                          name="fontSize"
                          value={option.value}
                          checked={fontSize === option.value}
                          onChange={(e) => setFontSize(e.target.value)}
                          className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500"
                        />
                        <span className={`${option.size} text-gray-700`}>{option.label}</span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* „ÉÜ„Éº„ÉûË®≠ÂÆö */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">„ÉÜ„Éº„Éû</label>
                  <div className="space-y-2">
                    {[
                      { value: 'light', label: 'Êòé„Çã„ÅÑ', icon: '‚òÄÔ∏è' },
                      { value: 'dark', label: 'Êöó„ÅÑ', icon: 'üåô' },
                      { value: 'auto', label: 'Ëá™Âãï', icon: '‚ö°' }
                    ].map((option) => (
                      <label key={option.value} className="flex items-center space-x-3 cursor-pointer">
                        <input
                          type="radio"
                          name="theme"
                          value={option.value}
                          checked={theme === option.value}
                          onChange={(e) => setTheme(e.target.value)}
                          className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500"
                        />
                        <span className="text-gray-700">{option.icon} {option.label}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* „Éï„ÉÉ„Çø„Éº */}
          <div className="flex justify-end space-x-4">
            <button
              onClick={onHide}
              className="px-6 py-3 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors duration-200"
            >
              „Ç≠„É£„É≥„Çª„É´
            </button>
            <button
              onClick={handleSave}
              className="px-6 py-3 text-white bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 rounded-lg font-medium shadow-lg hover:shadow-xl transition-all duration-200"
            >
              ‰øùÂ≠ò
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PreferencesModal;